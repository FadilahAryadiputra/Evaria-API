// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ORGANIZER
}

enum EventCategory {
  CONCERT
  THEATRE
  TALKSHOW
  ANIME
  IDOL
  WEBINAR
  SPORT
  ESPORT
  FASHION
}

enum EventLocation {
  ONLINE
  JAKARTA
  TANGERANG
  BANDUNG
  YOGYAKARTA
  SURABAYA
  SEMARANG
  MALANG
  KEDIRI
  MOJOKERTO
}

enum TransactionStatus {
  WAITING_PAYMENT
  WAITING_FOR_CONFIRMATION
  DONE
  REJECTED
  EXPIRED
  CANCELLED
}

model User {
  id             String   @id @default(uuid())
  username       String
  email          String   @unique
  password       String
  role           UserRole @default(USER)
  point          Int      @default(0)
  refCode        String   @unique
  profilePicture String   @default("UserImgPlaceholder.jpg")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transactions Transaction[]

  @@map("users")
}

model Organizer {
  id             String   @id @default(uuid())
  username       String   @unique
  email          String   @unique
  password       String
  role           UserRole @default(ORGANIZER)
  profilePicture String   @default("UserImgPlaceholder.jpg")

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  events       Event[]
  transactions Transaction[]

  @@map("organizers")
}

model Event {
  id          String        @id @default(uuid())
  slug        String        @unique
  title       String        @unique
  category    EventCategory
  location    EventLocation
  content     String        @db.Text
  description String        @db.Text
  thumbnail   String
  startDate   DateTime
  endDate     DateTime
  startTime   DateTime      @db.Time
  endTime     DateTime      @db.Time

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  organizerId  String
  organizer    Organizer     @relation(fields: [organizerId], references: [id])
  vouchers     Voucher[]
  transactions Transaction[]
  eventTickets EventTicket[]

  @@map("events")
}

model EventTicket {
  id          String @id @default(uuid())
  title       String @unique
  price       Int
  description String
  limit       Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  eventId String
  event   Event    @relation(fields: [eventId], references: [id])
  Ticket  Ticket[]

  @@map("event_tickets")
}

model Voucher {
  code        String   @id @unique
  discount    Int
  quota       Int
  expiredDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  eventId      String
  event        Event         @relation(fields: [eventId], references: [id])
  transactions Transaction[]

  @@map("vouchers")
}

model Transaction {
  id           String            @id @default(uuid())
  pointUsed    Int?
  totalPrice   Int
  paymentProof String?
  status       TransactionStatus @default(WAITING_PAYMENT)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId      String
  user        User      @relation(fields: [userId], references: [id])
  eventId     String
  event       Event     @relation(fields: [eventId], references: [id])
  organizerId String
  organizer   Organizer @relation(fields: [organizerId], references: [id])
  voucherCode String?
  voucher     Voucher?  @relation(fields: [voucherCode], references: [code])
  tickets     Ticket[]

  @@map("transactions")
}

model Ticket {
  id     String @id @default(uuid())
  qrCode String @default("qrPlaceholder.jpg")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  eventTicketId String
  eventTicket   EventTicket @relation(fields: [eventTicketId], references: [id])
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("tickets")
}
